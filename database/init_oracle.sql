-- HR AI Assistant Database Schema for Oracle
-- This script creates the complete database schema for the HR AI Assistant application

-- Connect as SYSDBA to create user and grant privileges
CONNECT system/OraclePassword123@//localhost:1521/XE

-- Create tablespace for HR AI Assistant
CREATE TABLESPACE hr_ai_data
DATAFILE 'hr_ai_data.dbf' SIZE 500M
AUTOEXTEND ON NEXT 100M MAXSIZE 2G;

-- Create user for HR AI Assistant
CREATE USER hr_user IDENTIFIED BY hr_password
DEFAULT TABLESPACE hr_ai_data
TEMPORARY TABLESPACE temp;

-- Grant necessary privileges
GRANT CONNECT, RESOURCE, CREATE VIEW, CREATE SEQUENCE TO hr_user;
GRANT UNLIMITED TABLESPACE TO hr_user;

-- Connect as hr_user
CONNECT hr_user/hr_password@//localhost:1521/XE

-- =============================================================================
-- DEPARTMENTS TABLE
-- =============================================================================
CREATE TABLE departments (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL UNIQUE,
    description CLOB,
    department_code VARCHAR2(10) NOT NULL UNIQUE,
    manager_id NUMBER,
    budget NUMBER(15,2) DEFAULT 0,
    location VARCHAR2(100),
    is_active NUMBER(1) DEFAULT 1 CHECK (is_active IN (0,1)),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Index for departments
CREATE INDEX idx_departments_code ON departments(department_code);
CREATE INDEX idx_departments_active ON departments(is_active);

-- =============================================================================
-- ROLES TABLE
-- =============================================================================
CREATE TABLE roles (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR2(100) NOT NULL,
    description CLOB,
    role_code VARCHAR2(20) NOT NULL UNIQUE,
    level_num NUMBER DEFAULT 1 CHECK (level_num BETWEEN 1 AND 5),
    department_id NUMBER NOT NULL,
    min_salary NUMBER(10,2),
    max_salary NUMBER(10,2),
    required_skills CLOB,
    is_active NUMBER(1) DEFAULT 1 CHECK (is_active IN (0,1)),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_roles_department FOREIGN KEY (department_id) REFERENCES departments(id),
    CONSTRAINT chk_salary_range CHECK (max_salary IS NULL OR min_salary IS NULL OR max_salary >= min_salary)
);

-- Index for roles
CREATE INDEX idx_roles_code ON roles(role_code);
CREATE INDEX idx_roles_dept ON roles(department_id);
CREATE INDEX idx_roles_active ON roles(is_active);

-- =============================================================================
-- EMPLOYEES TABLE
-- =============================================================================
CREATE TABLE employees (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    employee_id VARCHAR2(20) NOT NULL UNIQUE,
    email VARCHAR2(100) NOT NULL UNIQUE,
    username VARCHAR2(50) NOT NULL UNIQUE,
    password_hash VARCHAR2(255) NOT NULL,
    
    -- Personal information
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    middle_name VARCHAR2(50),
    date_of_birth DATE,
    gender VARCHAR2(20) CHECK (gender IN ('male', 'female', 'other', 'prefer_not_to_say')),
    phone_number VARCHAR2(20),
    emergency_contact_name VARCHAR2(100),
    emergency_contact_phone VARCHAR2(20),
    
    -- Address information
    address_line1 VARCHAR2(200),
    address_line2 VARCHAR2(200),
    city VARCHAR2(50),
    state VARCHAR2(50),
    postal_code VARCHAR2(20),
    country VARCHAR2(50) DEFAULT 'India',
    
    -- Employment information
    department_id NUMBER NOT NULL,
    role_id NUMBER NOT NULL,
    manager_id NUMBER,
    hire_date DATE NOT NULL,
    termination_date DATE,
    employment_status VARCHAR2(20) DEFAULT 'active' CHECK (employment_status IN ('active', 'inactive', 'terminated', 'on_leave', 'probation')),
    employment_type VARCHAR2(20) DEFAULT 'full_time' CHECK (employment_type IN ('full_time', 'part_time', 'contract', 'intern')),
    
    -- Compensation
    salary NUMBER(10,2),
    currency VARCHAR2(3) DEFAULT 'INR',
    pay_frequency VARCHAR2(20) DEFAULT 'monthly',
    
    -- System fields
    is_active NUMBER(1) DEFAULT 1 CHECK (is_active IN (0,1)),
    last_login TIMESTAMP,
    profile_picture_url VARCHAR2(500),
    bio CLOB,
    skills CLOB,
    certifications CLOB,
    
    -- Audit fields
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by NUMBER,
    updated_by NUMBER,
    
    CONSTRAINT fk_employees_department FOREIGN KEY (department_id) REFERENCES departments(id),
    CONSTRAINT fk_employees_role FOREIGN KEY (role_id) REFERENCES roles(id),
    CONSTRAINT fk_employees_manager FOREIGN KEY (manager_id) REFERENCES employees(id),
    CONSTRAINT fk_employees_created_by FOREIGN KEY (created_by) REFERENCES employees(id),
    CONSTRAINT fk_employees_updated_by FOREIGN KEY (updated_by) REFERENCES employees(id)
);

-- Indexes for employees
CREATE INDEX idx_employees_emp_id ON employees(employee_id);
CREATE INDEX idx_employees_email ON employees(email);
CREATE INDEX idx_employees_username ON employees(username);
CREATE INDEX idx_employees_dept ON employees(department_id);
CREATE INDEX idx_employees_role ON employees(role_id);
CREATE INDEX idx_employees_manager ON employees(manager_id);
CREATE INDEX idx_employees_status ON employees(employment_status);
CREATE INDEX idx_employees_active ON employees(is_active);

-- Add foreign key constraint for departments manager after employees table is created
ALTER TABLE departments ADD CONSTRAINT fk_departments_manager FOREIGN KEY (manager_id) REFERENCES employees(id);

-- =============================================================================
-- LEAVE TYPES TABLE
-- =============================================================================
CREATE TABLE leave_types (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(50) NOT NULL UNIQUE,
    code VARCHAR2(10) NOT NULL UNIQUE,
    description CLOB,
    
    -- Leave configuration
    max_days_per_year NUMBER DEFAULT 0,
    max_consecutive_days NUMBER DEFAULT 0,
    min_advance_notice_days NUMBER DEFAULT 0,
    max_advance_notice_days NUMBER DEFAULT 365,
    
    -- Approval requirements
    requires_approval NUMBER(1) DEFAULT 1 CHECK (requires_approval IN (0,1)),
    requires_manager_approval NUMBER(1) DEFAULT 1 CHECK (requires_manager_approval IN (0,1)),
    requires_hr_approval NUMBER(1) DEFAULT 0 CHECK (requires_hr_approval IN (0,1)),
    requires_documentation NUMBER(1) DEFAULT 0 CHECK (requires_documentation IN (0,1)),
    
    -- Leave characteristics
    is_paid NUMBER(1) DEFAULT 1 CHECK (is_paid IN (0,1)),
    is_carry_forward NUMBER(1) DEFAULT 0 CHECK (is_carry_forward IN (0,1)),
    carry_forward_limit NUMBER DEFAULT 0,
    accrual_rate NUMBER(5,2) DEFAULT 0,
    
    -- System fields
    is_active NUMBER(1) DEFAULT 1 CHECK (is_active IN (0,1)),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes for leave types
CREATE INDEX idx_leave_types_code ON leave_types(code);
CREATE INDEX idx_leave_types_active ON leave_types(is_active);

-- =============================================================================
-- LEAVE BALANCES TABLE
-- =============================================================================
CREATE TABLE leave_balances (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    employee_id NUMBER NOT NULL,
    leave_type_id NUMBER NOT NULL,
    year NUMBER NOT NULL,
    
    -- Balance tracking
    allocated_days NUMBER(5,2) DEFAULT 0,
    used_days NUMBER(5,2) DEFAULT 0,
    pending_days NUMBER(5,2) DEFAULT 0,
    carry_forward_days NUMBER(5,2) DEFAULT 0,
    
    -- Audit fields
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_leave_balances_employee FOREIGN KEY (employee_id) REFERENCES employees(id),
    CONSTRAINT fk_leave_balances_leave_type FOREIGN KEY (leave_type_id) REFERENCES leave_types(id),
    CONSTRAINT uk_leave_balances_unique UNIQUE (employee_id, leave_type_id, year)
);

-- Indexes for leave balances
CREATE INDEX idx_leave_balances_emp_year ON leave_balances(employee_id, year);
CREATE INDEX idx_leave_balances_type ON leave_balances(leave_type_id);

-- =============================================================================
-- LEAVE REQUESTS TABLE
-- =============================================================================
CREATE TABLE leave_requests (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    request_id VARCHAR2(20) NOT NULL UNIQUE,
    employee_id NUMBER NOT NULL,
    leave_type_id NUMBER NOT NULL,
    
    -- Leave details
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    total_days NUMBER(5,2) NOT NULL,
    reason CLOB NOT NULL,
    emergency_contact VARCHAR2(100),
    emergency_phone VARCHAR2(20),
    
    -- Request metadata
    status VARCHAR2(20) DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected', 'cancelled', 'withdrawn')),
    priority VARCHAR2(10) DEFAULT 'normal' CHECK (priority IN ('low', 'normal', 'high', 'urgent')),
    is_half_day NUMBER(1) DEFAULT 0 CHECK (is_half_day IN (0,1)),
    half_day_session VARCHAR2(10) CHECK (half_day_session IN ('morning', 'afternoon')),
    
    -- Approval workflow
    manager_id NUMBER,
    manager_approval_date TIMESTAMP,
    manager_comments CLOB,
    
    hr_approval_required NUMBER(1) DEFAULT 0 CHECK (hr_approval_required IN (0,1)),
    hr_approver_id NUMBER,
    hr_approval_date TIMESTAMP,
    hr_comments CLOB,
    
    -- Additional information
    attachments CLOB,
    work_handover CLOB,
    backup_contact_id NUMBER,
    
    -- System fields
    submitted_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    approved_date TIMESTAMP,
    rejected_date TIMESTAMP,
    cancellation_reason CLOB,
    
    -- Audit fields
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by NUMBER,
    
    CONSTRAINT fk_leave_requests_employee FOREIGN KEY (employee_id) REFERENCES employees(id),
    CONSTRAINT fk_leave_requests_leave_type FOREIGN KEY (leave_type_id) REFERENCES leave_types(id),
    CONSTRAINT fk_leave_requests_manager FOREIGN KEY (manager_id) REFERENCES employees(id),
    CONSTRAINT fk_leave_requests_hr_approver FOREIGN KEY (hr_approver_id) REFERENCES employees(id),
    CONSTRAINT fk_leave_requests_backup FOREIGN KEY (backup_contact_id) REFERENCES employees(id),
    CONSTRAINT fk_leave_requests_created_by FOREIGN KEY (created_by) REFERENCES employees(id),
    CONSTRAINT chk_leave_dates CHECK (end_date >= start_date)
);

-- Indexes for leave requests
CREATE INDEX idx_leave_requests_req_id ON leave_requests(request_id);
CREATE INDEX idx_leave_requests_employee ON leave_requests(employee_id);
CREATE INDEX idx_leave_requests_dates ON leave_requests(start_date, end_date);
CREATE INDEX idx_leave_requests_status ON leave_requests(status);
CREATE INDEX idx_leave_requests_manager ON leave_requests(manager_id);

-- =============================================================================
-- DOCUMENTS TABLE
-- =============================================================================
CREATE TABLE documents (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR2(200) NOT NULL,
    description CLOB,
    document_type VARCHAR2(20) NOT NULL CHECK (document_type IN ('policy', 'procedure', 'handbook', 'form', 'template', 'certification', 'training', 'onboarding', 'benefits', 'compliance', 'other')),
    
    -- File information
    file_path VARCHAR2(500) NOT NULL,
    file_name VARCHAR2(200) NOT NULL,
    file_size NUMBER,
    file_extension VARCHAR2(10),
    mime_type VARCHAR2(100),
    
    -- Content and metadata
    content_text CLOB,
    keywords CLOB,
    tags CLOB,
    version VARCHAR2(20) DEFAULT '1.0',
    language VARCHAR2(10) DEFAULT 'en',
    
    -- Access and permissions
    access_level VARCHAR2(20) DEFAULT 'internal' CHECK (access_level IN ('public', 'internal', 'confidential', 'restricted')),
    department_access CLOB,
    role_access CLOB,
    
    -- Document lifecycle
    status VARCHAR2(20) DEFAULT 'draft' CHECK (status IN ('draft', 'under_review', 'approved', 'published', 'archived', 'expired')),
    effective_date TIMESTAMP,
    expiry_date TIMESTAMP,
    review_date TIMESTAMP,
    
    -- Approval workflow
    author_id NUMBER NOT NULL,
    reviewer_id NUMBER,
    approver_id NUMBER,
    reviewed_at TIMESTAMP,
    approved_at TIMESTAMP,
    published_at TIMESTAMP,
    
    -- Search and indexing
    is_searchable NUMBER(1) DEFAULT 1 CHECK (is_searchable IN (0,1)),
    opensearch_indexed NUMBER(1) DEFAULT 0 CHECK (opensearch_indexed IN (0,1)),
    search_boost NUMBER DEFAULT 1,
    
    -- Analytics
    view_count NUMBER DEFAULT 0,
    download_count NUMBER DEFAULT 0,
    last_accessed TIMESTAMP,
    
    -- System fields
    is_active NUMBER(1) DEFAULT 1 CHECK (is_active IN (0,1)),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_documents_author FOREIGN KEY (author_id) REFERENCES employees(id),
    CONSTRAINT fk_documents_reviewer FOREIGN KEY (reviewer_id) REFERENCES employees(id),
    CONSTRAINT fk_documents_approver FOREIGN KEY (approver_id) REFERENCES employees(id)
);

-- Indexes for documents
CREATE INDEX idx_documents_title ON documents(UPPER(title));
CREATE INDEX idx_documents_type ON documents(document_type);
CREATE INDEX idx_documents_status ON documents(status);
CREATE INDEX idx_documents_author ON documents(author_id);
CREATE INDEX idx_documents_active ON documents(is_active);
CREATE INDEX idx_documents_searchable ON documents(is_searchable);

-- =============================================================================
-- DOCUMENT REQUESTS TABLE
-- =============================================================================
CREATE TABLE document_requests (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    request_id VARCHAR2(20) NOT NULL UNIQUE,
    employee_id NUMBER NOT NULL,
    
    -- Request details
    document_id NUMBER,
    document_title VARCHAR2(200) NOT NULL,
    document_type VARCHAR2(20) NOT NULL CHECK (document_type IN ('policy', 'procedure', 'handbook', 'form', 'template', 'certification', 'training', 'onboarding', 'benefits', 'compliance', 'other')),
    description CLOB NOT NULL,
    purpose CLOB,
    
    -- Request specifics
    format_preference VARCHAR2(20) DEFAULT 'pdf',
    delivery_method VARCHAR2(20) DEFAULT 'email',
    urgency VARCHAR2(10) DEFAULT 'normal' CHECK (urgency IN ('low', 'normal', 'high', 'urgent')),
    
    -- Additional requirements
    certified_copy NUMBER(1) DEFAULT 0 CHECK (certified_copy IN (0,1)),
    multiple_copies NUMBER DEFAULT 1,
    special_instructions CLOB,
    
    -- Request workflow
    status VARCHAR2(20) DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'completed', 'rejected', 'cancelled')),
    assigned_to NUMBER,
    estimated_completion TIMESTAMP,
    completed_at TIMESTAMP,
    
    -- Approval (if required)
    requires_approval NUMBER(1) DEFAULT 0 CHECK (requires_approval IN (0,1)),
    approver_id NUMBER,
    approved_at TIMESTAMP,
    approval_comments CLOB,
    
    -- Processing notes
    processing_notes CLOB,
    rejection_reason CLOB,
    completion_notes CLOB,
    
    -- Generated document info
    generated_file_path VARCHAR2(500),
    generated_file_name VARCHAR2(200),
    expiry_date TIMESTAMP,
    
    -- System fields
    submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_doc_requests_employee FOREIGN KEY (employee_id) REFERENCES employees(id),
    CONSTRAINT fk_doc_requests_document FOREIGN KEY (document_id) REFERENCES documents(id),
    CONSTRAINT fk_doc_requests_assigned FOREIGN KEY (assigned_to) REFERENCES employees(id),
    CONSTRAINT fk_doc_requests_approver FOREIGN KEY (approver_id) REFERENCES employees(id)
);

-- Indexes for document requests
CREATE INDEX idx_doc_requests_req_id ON document_requests(request_id);
CREATE INDEX idx_doc_requests_employee ON document_requests(employee_id);
CREATE INDEX idx_doc_requests_status ON document_requests(status);
CREATE INDEX idx_doc_requests_assigned ON document_requests(assigned_to);

-- =============================================================================
-- SURVEYS TABLE
-- =============================================================================
CREATE TABLE surveys (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR2(200) NOT NULL,
    description CLOB,
    survey_type VARCHAR2(20) NOT NULL CHECK (survey_type IN ('engagement', 'satisfaction', 'feedback', 'exit', 'onboarding', 'performance', 'pulse', 'custom')),
    
    -- Survey configuration
    questions CLOB,
    instructions CLOB,
    estimated_duration NUMBER,
    
    -- Targeting and access
    target_departments CLOB,
    target_roles CLOB,
    target_employees CLOB,
    is_anonymous NUMBER(1) DEFAULT 0 CHECK (is_anonymous IN (0,1)),
    is_mandatory NUMBER(1) DEFAULT 0 CHECK (is_mandatory IN (0,1)),
    
    -- Scheduling
    status VARCHAR2(20) DEFAULT 'draft' CHECK (status IN ('draft', 'active', 'paused', 'completed', 'archived')),
    start_date TIMESTAMP,
    end_date TIMESTAMP,
    reminder_frequency NUMBER DEFAULT 7,
    
    -- Survey settings
    allow_multiple_responses NUMBER(1) DEFAULT 0 CHECK (allow_multiple_responses IN (0,1)),
    show_progress NUMBER(1) DEFAULT 1 CHECK (show_progress IN (0,1)),
    randomize_questions NUMBER(1) DEFAULT 0 CHECK (randomize_questions IN (0,1)),
    require_all_questions NUMBER(1) DEFAULT 1 CHECK (require_all_questions IN (0,1)),
    
    -- Results and analytics
    total_invited NUMBER DEFAULT 0,
    total_responses NUMBER DEFAULT 0,
    completion_rate NUMBER(5,2) DEFAULT 0,
    average_duration NUMBER DEFAULT 0,
    
    -- System fields
    created_by NUMBER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    published_at TIMESTAMP,
    
    CONSTRAINT fk_surveys_created_by FOREIGN KEY (created_by) REFERENCES employees(id)
);

-- Indexes for surveys
CREATE INDEX idx_surveys_type ON surveys(survey_type);
CREATE INDEX idx_surveys_status ON surveys(status);
CREATE INDEX idx_surveys_created_by ON surveys(created_by);
CREATE INDEX idx_surveys_dates ON surveys(start_date, end_date);

-- =============================================================================
-- SURVEY RESPONSES TABLE
-- =============================================================================
CREATE TABLE survey_responses (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    survey_id NUMBER NOT NULL,
    employee_id NUMBER,
    
    -- Response data
    responses CLOB NOT NULL,
    completion_status VARCHAR2(20) DEFAULT 'in_progress' CHECK (completion_status IN ('in_progress', 'completed', 'abandoned')),
    completion_percentage NUMBER(5,2) DEFAULT 0,
    
    -- Timing information
    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    completed_at TIMESTAMP,
    duration_seconds NUMBER,
    
    -- Response metadata
    ip_address VARCHAR2(45),
    user_agent CLOB,
    device_type VARCHAR2(20),
    
    -- System fields
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_survey_responses_survey FOREIGN KEY (survey_id) REFERENCES surveys(id),
    CONSTRAINT fk_survey_responses_employee FOREIGN KEY (employee_id) REFERENCES employees(id)
);

-- Indexes for survey responses
CREATE INDEX idx_survey_responses_survey ON survey_responses(survey_id);
CREATE INDEX idx_survey_responses_employee ON survey_responses(employee_id);
CREATE INDEX idx_survey_responses_status ON survey_responses(completion_status);

-- =============================================================================
-- ENGAGEMENT METRICS TABLE
-- =============================================================================
CREATE TABLE engagement_metrics (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    employee_id NUMBER NOT NULL,
    
    -- Metric details
    metric_date DATE NOT NULL,
    engagement_level VARCHAR2(20) CHECK (engagement_level IN ('highly_engaged', 'engaged', 'moderately_engaged', 'disengaged', 'highly_disengaged')),
    engagement_score NUMBER(5,2),
    
    -- Detailed scores
    job_satisfaction_score NUMBER(5,2),
    work_life_balance_score NUMBER(5,2),
    career_development_score NUMBER(5,2),
    compensation_satisfaction_score NUMBER(5,2),
    manager_relationship_score NUMBER(5,2),
    team_collaboration_score NUMBER(5,2),
    company_culture_score NUMBER(5,2),
    
    -- Behavioral indicators
    productivity_score NUMBER(5,2),
    attendance_score NUMBER(5,2),
    participation_score NUMBER(5,2),
    feedback_frequency NUMBER DEFAULT 0,
    
    -- Risk indicators
    flight_risk_score NUMBER(5,2),
    burnout_risk_score NUMBER(5,2),
    stress_level_score NUMBER(5,2),
    
    -- Data sources
    survey_based NUMBER(1) DEFAULT 0 CHECK (survey_based IN (0,1)),
    survey_id NUMBER,
    ai_analyzed NUMBER(1) DEFAULT 0 CHECK (ai_analyzed IN (0,1)),
    
    -- Comments and notes
    notes CLOB,
    action_items CLOB,
    
    -- System fields
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_engagement_metrics_employee FOREIGN KEY (employee_id) REFERENCES employees(id),
    CONSTRAINT fk_engagement_metrics_survey FOREIGN KEY (survey_id) REFERENCES surveys(id)
);

-- Indexes for engagement metrics
CREATE INDEX idx_engagement_metrics_emp_date ON engagement_metrics(employee_id, metric_date);
CREATE INDEX idx_engagement_metrics_level ON engagement_metrics(engagement_level);
CREATE INDEX idx_engagement_metrics_survey ON engagement_metrics(survey_id);

-- =============================================================================
-- CHAT SESSIONS TABLE
-- =============================================================================
CREATE TABLE chat_sessions (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    session_id VARCHAR2(50) NOT NULL UNIQUE,
    employee_id NUMBER NOT NULL,
    
    -- Session details
    title VARCHAR2(200),
    description CLOB,
    category VARCHAR2(20) DEFAULT 'general_hr' CHECK (category IN ('leave_management', 'document_request', 'policy_question', 'benefits_inquiry', 'payroll_query', 'training_request', 'general_hr', 'technical_support', 'feedback', 'other')),
    
    -- Session metadata
    status VARCHAR2(10) DEFAULT 'active' CHECK (status IN ('active', 'ended', 'timeout', 'error')),
    total_messages NUMBER DEFAULT 0,
    user_messages NUMBER DEFAULT 0,
    ai_messages NUMBER DEFAULT 0,
    
    -- Timing information
    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ended_at TIMESTAMP,
    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    duration_seconds NUMBER,
    
    -- Session analytics
    satisfaction_rating NUMBER CHECK (satisfaction_rating BETWEEN 1 AND 5),
    was_helpful NUMBER(1) CHECK (was_helpful IN (0,1)),
    user_feedback CLOB,
    resolution_status VARCHAR2(20),
    
    -- AI performance metrics
    average_response_time NUMBER(8,3),
    total_tokens_used NUMBER DEFAULT 0,
    ai_confidence_avg NUMBER(5,2),
    
    -- Context and personalization
    context_data CLOB,
    user_preferences CLOB,
    
    -- System fields
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_chat_sessions_employee FOREIGN KEY (employee_id) REFERENCES employees(id)
);

-- Indexes for chat sessions
CREATE INDEX idx_chat_sessions_session_id ON chat_sessions(session_id);
CREATE INDEX idx_chat_sessions_employee ON chat_sessions(employee_id);
CREATE INDEX idx_chat_sessions_status ON chat_sessions(status);
CREATE INDEX idx_chat_sessions_category ON chat_sessions(category);

-- =============================================================================
-- QUERY LOGS TABLE
-- =============================================================================
CREATE TABLE query_logs (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    chat_session_id NUMBER NOT NULL,
    employee_id NUMBER NOT NULL,
    
    -- Query details
    user_query CLOB NOT NULL,
    ai_response CLOB NOT NULL,
    query_category VARCHAR2(20) DEFAULT 'general_hr' CHECK (query_category IN ('leave_management', 'document_request', 'policy_question', 'benefits_inquiry', 'payroll_query', 'training_request', 'general_hr', 'technical_support', 'feedback', 'other')),
    intent_detected VARCHAR2(100),
    
    -- AI processing information
    processing_time_ms NUMBER,
    tokens_used NUMBER DEFAULT 0,
    model_used VARCHAR2(50),
    confidence_score NUMBER(5,2),
    
    -- Context and RAG information
    context_retrieved NUMBER(1) DEFAULT 0 CHECK (context_retrieved IN (0,1)),
    documents_used CLOB,
    rag_score NUMBER(5,2),
    
    -- Query classification
    complexity_level VARCHAR2(20),
    requires_escalation NUMBER(1) DEFAULT 0 CHECK (requires_escalation IN (0,1)),
    escalation_reason CLOB,
    
    -- User interaction
    was_helpful NUMBER(1) CHECK (was_helpful IN (0,1)),
    user_rating NUMBER CHECK (user_rating BETWEEN 1 AND 5),
    user_feedback CLOB,
    follow_up_needed NUMBER(1) DEFAULT 0 CHECK (follow_up_needed IN (0,1)),
    
    -- Sentiment analysis
    user_sentiment VARCHAR2(10) CHECK (user_sentiment IN ('positive', 'negative', 'neutral', 'mixed')),
    sentiment_score NUMBER(5,2),
    emotion_detected VARCHAR2(50),
    
    -- Query resolution
    status VARCHAR2(20) DEFAULT 'answered' CHECK (status IN ('answered', 'partially_answered', 'escalated', 'pending', 'failed')),
    resolution_notes CLOB,
    hr_action_required NUMBER(1) DEFAULT 0 CHECK (hr_action_required IN (0,1)),
    action_taken CLOB,
    
    -- System fields
    query_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_query_logs_chat_session FOREIGN KEY (chat_session_id) REFERENCES chat_sessions(id),
    CONSTRAINT fk_query_logs_employee FOREIGN KEY (employee_id) REFERENCES employees(id)
);

-- Indexes for query logs
CREATE INDEX idx_query_logs_session ON query_logs(chat_session_id);
CREATE INDEX idx_query_logs_employee ON query_logs(employee_id);
CREATE INDEX idx_query_logs_category ON query_logs(query_category);
CREATE INDEX idx_query_logs_timestamp ON query_logs(query_timestamp);
CREATE INDEX idx_query_logs_escalation ON query_logs(requires_escalation);

-- =============================================================================
-- CREATE SEQUENCES FOR MANUAL ID GENERATION (if needed)
-- =============================================================================
CREATE SEQUENCE emp_id_seq START WITH 1001 INCREMENT BY 1;
CREATE SEQUENCE leave_req_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE doc_req_seq START WITH 1 INCREMENT BY 1;

-- =============================================================================
-- CREATE TRIGGERS FOR UPDATED_AT TIMESTAMPS
-- =============================================================================

-- Departments trigger
CREATE OR REPLACE TRIGGER trg_departments_updated_at
    BEFORE UPDATE ON departments
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- Roles trigger
CREATE OR REPLACE TRIGGER trg_roles_updated_at
    BEFORE UPDATE ON roles
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- Employees trigger
CREATE OR REPLACE TRIGGER trg_employees_updated_at
    BEFORE UPDATE ON employees
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- Leave types trigger
CREATE OR REPLACE TRIGGER trg_leave_types_updated_at
    BEFORE UPDATE ON leave_types
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- Leave balances trigger
CREATE OR REPLACE TRIGGER trg_leave_balances_updated_at
    BEFORE UPDATE ON leave_balances
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- Leave requests trigger
CREATE OR REPLACE TRIGGER trg_leave_requests_updated_at
    BEFORE UPDATE ON leave_requests
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- Documents trigger
CREATE OR REPLACE TRIGGER trg_documents_updated_at
    BEFORE UPDATE ON documents
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- Document requests trigger
CREATE OR REPLACE TRIGGER trg_doc_requests_updated_at
    BEFORE UPDATE ON document_requests
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- Surveys trigger
CREATE OR REPLACE TRIGGER trg_surveys_updated_at
    BEFORE UPDATE ON surveys
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- Survey responses trigger
CREATE OR REPLACE TRIGGER trg_survey_responses_updated_at
    BEFORE UPDATE ON survey_responses
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- Engagement metrics trigger
CREATE OR REPLACE TRIGGER trg_engagement_metrics_updated_at
    BEFORE UPDATE ON engagement_metrics
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- Chat sessions trigger
CREATE OR REPLACE TRIGGER trg_chat_sessions_updated_at
    BEFORE UPDATE ON chat_sessions
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- Query logs trigger
CREATE OR REPLACE TRIGGER trg_query_logs_updated_at
    BEFORE UPDATE ON query_logs
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- =============================================================================
-- CREATE VIEWS FOR COMMON QUERIES
-- =============================================================================

-- Employee summary view
CREATE OR REPLACE VIEW v_employee_summary AS
SELECT 
    e.id,
    e.employee_id,
    e.first_name || ' ' || e.last_name AS full_name,
    e.email,
    e.employment_status,
    d.name AS department_name,
    r.title AS role_title,
    m.first_name || ' ' || m.last_name AS manager_name,
    e.hire_date,
    FLOOR(MONTHS_BETWEEN(SYSDATE, e.hire_date) / 12) AS years_of_service,
    e.is_active
FROM employees e
LEFT JOIN departments d ON e.department_id = d.id
LEFT JOIN roles r ON e.role_id = r.id
LEFT JOIN employees m ON e.manager_id = m.id;

-- Leave request summary view
CREATE OR REPLACE VIEW v_leave_request_summary AS
SELECT 
    lr.id,
    lr.request_id,
    e.employee_id,
    e.first_name || ' ' || e.last_name AS employee_name,
    lt.name AS leave_type,
    lr.start_date,
    lr.end_date,
    lr.total_days,
    lr.status,
    lr.submitted_date,
    m.first_name || ' ' || m.last_name AS manager_name
FROM leave_requests lr
JOIN employees e ON lr.employee_id = e.id
JOIN leave_types lt ON lr.leave_type_id = lt.id
LEFT JOIN employees m ON lr.manager_id = m.id;

-- Document summary view
CREATE OR REPLACE VIEW v_document_summary AS
SELECT 
    d.id,
    d.title,
    d.document_type,
    d.status,
    d.file_name,
    d.file_size,
    d.view_count,
    d.download_count,
    a.first_name || ' ' || a.last_name AS author_name,
    d.created_at,
    d.updated_at
FROM documents d
JOIN employees a ON d.author_id = a.id
WHERE d.is_active = 1;

COMMIT;

-- Display completion message
SELECT 'HR AI Assistant database schema created successfully!' AS status FROM dual;